/* =======================================*/
/*
/* COLORS
/*
/* =======================================*/

$color-black		: #444;
$color-spaceblack	: #171F2D;
$color-grey			: #eee;
$color-spacegrey	: #a7adba;

$color-red			: #F44336;
$color-pink			: #E91E63;
$color-purple		: #9C27B0;

$color-lightblue	: #03A9F4;
$color-blue			: #2196F3;
$color-darkblue		: #1e70cd;

$color-indigo		: #3F51B5;
$color-cyan			: #00BCD4;
$color-teal			: #009688;

$color-green		: #4CAF50;
$color-lightgreen	: #8BC34A;
$color-lime			: #CDDC39;

$color-yellow		: #FFEB3B;
$color-amber		: #FFC107;
$color-orange		: #FF9800;

$color-brand: $color-spaceblack;

/* =======================================*/
/*
/* LAYOUT
/*
/* =======================================*/

$whitespace		: 20px;
$sidebar-width	: 205px;
$responsive		: true; 	// true or false
$use-devmode	: false; 	// true or false
$breakpoints: (
	'xs'	: 0px,
	's'  	: 400px,
	'm' 	: 650px,
	'l'  	: 800px,
	'xl'	: 960px,
	'xxl'	: 1180px
);

/* =======================================*/
/*
/* TYPOGRAPHY
/*
/* =======================================*/

$font-family	: 'Helvetica', 'Arial', sans-serif;
$font-size		: 14px;
$line-height	: 1.6;
$color-text		: $color-black;

/* =======================================*/
/*
/* USER INTERFACE
/*
/* =======================================*/

$border: 1px solid $color-grey;

$border-radius-size-1	: 2px;
$border-radius-size-2	: 4px;
$border-radius-size-3	: 6px;
$border-radius-size-4	: 8px;
$border-radius-size-5	: 10px;
$border-radius			: $border-radius-size-1;

$box-shadow-size-1	: 0px 1px 3px rgba(0, 0, 0, 0.2);
$box-shadow-size-2	: 0px 2px 5px rgba(0, 0, 0, 0.2);
$box-shadow-size-3	: 0px 4px 9px rgba(0, 0, 0, 0.2);
$box-shadow-size-4	: 0px 8px 18px rgba(0, 0, 0, 0.2);
$box-shadow-size-5	: 0px 16px 32px rgba(0, 0, 0, 0.2);
$box-shadow			: $box-shadow-size-2;

@mixin transition() {
	-webkit-transition: all 125ms ease-in;
	-moz-transition: all 125ms ease-in;
	-ms-transition: all 125ms ease-in; // IE10 is actually unprefixed //
	-o-transition: all 125ms ease-in;
	transition: all 125ms ease-in;
}

/* =======================================*/
/*
/* COMPONENTS
/*
/* =======================================*/

$teaser-lines-to-show: 3;

/* =======================================*/
/*
/* MEDIAQUERIES
/* 
/* =======================================*/

/* =======================================*/
/* ABOVE - use: @include above($name) {...} 
/* =======================================*/
@mixin above($name) {
	@if $name == 'xs' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen {
			@content;
		}
	}
	@if $name == 's' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 's')) {
			@content;
		}
	}
	@if $name == 'm' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 'm')) {
			@content;
		}
	}
	@if $name == 'l' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 'l')) {
			@content;
		}
	}
	@if $name == 'xl' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 'xl')) {
			@content;
		}
	}
	@if $name == 'xxl' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 'xxl')) {
			@content;
		}
	}
}

/* =======================================*/
/* BETWEEN - use: @include between($name1, $name2) {...} 
/* =======================================*/
@mixin between($name1, $name2) {
	@if map-has-key($breakpoints, $name1) and map-has-key($breakpoints, $name2) and $responsive == true {
		@media only screen and (min-width: #{inspect(map-get($breakpoints, $name1))}) and (max-width: #{inspect(map-get($breakpoints, $name2))}) {
			@content;
		}
	}
}
/* =======================================*/
/* AT - use: @include at($name) {...} 
/* =======================================*/
@mixin at($name) {
	@if $name == 'xs' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (max-width: map-get($breakpoints, 's')) {
			@content;
		}
	}
	@if $name == 's' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 's')) and (max-width: map-get($breakpoints, 'm')) {
			@content;
		}
	}
	@if $name == 'm' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 'm')) and (max-width: map-get($breakpoints, 'l')) {
			@content;
		}
	}
	@if $name == 'l' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 'l')) and (max-width: map-get($breakpoints, 'xl')) {
			@content;
		}
	}
	@if $name == 'xl' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 'xl')) and (max-width: map-get($breakpoints, 'xxl')) {
			@content;
		}
	}
	@if $name == 'xxl' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 'xxl')) {
			@content;
		}
	}
}

/* =======================================*/
/* BELOW - use: @include below($name) {...} 
/* =======================================*/
@mixin below($name) {
	@if $name == 'xs' and map-has-key($breakpoints, $name) and $responsive == true {
		// Below xs not possible
	}
	@if $name == 's' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (max-width: map-get($breakpoints, 'm')) {
			@content;
		}
	}
	@if $name == 'm' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (max-width: map-get($breakpoints, 'l')) {
			@content;
		}
	}
	@if $name == 'l' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (max-width: map-get($breakpoints, 'xl')) {
			@content;
		}
	}
	@if $name == 'xl' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (max-width: map-get($breakpoints, 'xxl')) {
			@content;
		}
	}
	@if $name == 'xxl' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen {
			@content;
		}
	}
}

/* =======================================*/
/*
/* CONTAINER
/* 
/* =======================================*/

@mixin container() {
	@if $responsive == true {
		min-width: 0;
	} 
	@else {
		min-width: map-get($breakpoints, xl);
	}
	max-width: map-get($breakpoints, xxl);
	margin: 0 auto;
}

/* =======================================*/
/*
/* FLEXBOX
/* 
/* =======================================*/

@mixin flexbox($type: null, $direction: null, $wrap: null, $justify: null, $align: null) {
	// Flex or Inline-Flex
	@if $type == 'inline-flex' {
		display: inline-flex;
		margin-right: -4px; //fix for: invisible spacing for inline-block
	} @else {
		display: flex;
	} 
	// Flex Direction
	@if $direction == 'column' or $direction == 'col' {
		flex-direction: column;
	} @else {
		flex-direction: row;
	} 
	// Flex Wrap
	@if $wrap == 'nowrap' or $wrap == 'no-wrap' {
		flex-wrap: nowrap;
	} @else {
		flex-wrap: wrap;
	}
	// Justify Content
	@if $justify == null or $justify == 'space-between' or $justify == 'spacebetween' {
		justify-content: space-between;
	} @else if $justify == 'space-around' or $justify == 'spacearound' {
		justify-content: space-around;
	} @else if $justify == 'center' {
		justify-content: center;
	} @else if $justify == 'flex-start' or $justify == 'flexstart' or $justify == 'start'{
		justify-content: flex-start;
	} @else if $justify == 'flex-end' or $justify == 'flexend' or $justify == 'end' {
		justify-content: flex-end;
	}
	// Align items
	@if $align == null or $align == 'stretch' {
		align-items: stretch;
	} @else if $align == null or $align == 'baseline' {
		align-items: baseline;
	} @else if $align == 'center' {
		align-items: center;
	} @else if $align == 'flex-start' or $align == 'flexstart' or $align == 'start'{
		align-items: flex-start;
	} @else if $align == 'flex-end' or $align == 'flexend' or $align == 'end' {
		align-items: flex-end;
	}
}

/* =======================================*/
/*
/* DEVMODE
/* 
/* =======================================*/

@if $use-devmode == true {
	* {background: rgba($color-brand, 0.075) !important;}
} 

/* =======================================*/
/*
/* CSS ARROWS
/* 
/* =======================================*/

/* =======================================*/
/* ARROW UP - use: @include arrow-up($color, $size, $align) {...} 
/* =======================================*/
@mixin arrow-up($color: $color-brand, $size: $whitespace/2, $align: center) {
	position: relative;
	
	&:before{
		content: " ";
		height: 0;
		width: 0;
		border: solid transparent;
		bottom: 100%;
		pointer-events: none;
		position: absolute;
		border-bottom-color: $color;
		border-width: $size;
		
		// Alignment
		@if $align == 'center' {
			left: 50%;
			margin-left: -($size);
		} @else if $align == 'left' {
			left: $whitespace;
		} @else if $align == 'right' {
			right: $whitespace;
		}
	}
}
/* =======================================*/
/* ARROW DOWN - use: @include arrow-down($color, $size, $align) {...} 
/* =======================================*/
@mixin arrow-down($color: $color-brand, $size: $whitespace/2, $align: center) {
	position: relative;
	
	&:before{
		content: " ";
		height: 0;
		width: 0;
		border: solid transparent;
		top: 100%;
		pointer-events: none;
		position: absolute;
		border-top-color: $color;
		border-width: $size;
		
		// Alignment
		@if $align == 'center' {
			left: 50%;
			margin-left: -($size);
		} @else if $align == 'left' {
			left: $whitespace;
		} @else if $align == 'right' {
			right: $whitespace;
		}
	}
}
/* =======================================*/
/* ARROW LEFT - use: @include arrow-left($color, $size, $align) {...} 
/* =======================================*/
@mixin arrow-left($color: $color-brand, $size: $whitespace/2, $align: center) {
	position: relative;
	
	&:before{
		content: " ";
		height: 0;
		width: 0;
		border: solid transparent;
		right: 100%;
		pointer-events: none;
		position: absolute;
		border-right-color: $color;
		border-width: $size;
		
		// Alignment
		@if $align == 'center' {
			top: 50%;
			margin-top: -($size);
		} @else if $align == 'top' {
			top: $whitespace;
		} @else if $align == 'bottom' {
			bottom: $whitespace;
		}
	}
}
/* =======================================*/
/* ARROW RIGHT - use: @include arrow-right($color, $size, $align) {...} 
/* =======================================*/
@mixin arrow-right($color: $color-brand, $size: $whitespace/2, $align: center) {
	position: relative;
	
	&:before{
		content: " ";
		height: 0;
		width: 0;
		border: solid transparent;
		left: 100%;
		pointer-events: none;
		position: absolute;
		border-left-color: $color;
		border-width: $size;
		
		// Alignment
		@if $align == 'center' {
			top: 50%;
			margin-top: -($size);
		} @else if $align == 'top' {
			top: $whitespace;
		} @else if $align == 'bottom' {
			bottom: $whitespace;
		}
	}
}

/* =======================================*/
/*
/* CLEARFIX
/* 
/* =======================================*/

@mixin clearfix() {
	*zoom: 1;
	&:before, &:after {
		content: '';
		display: table;
	}
	&:after {
		clear: both;
	}
}

