/* =======================================*/
/*
/* COLORS
/*
/* =======================================*/

$color-black		: #333;
$color-spaceblack	: #171F2D;
$color-grey			: #eee;
$color-spacegrey	: #a7adba;

$color-red			: #F44336;
$color-pink			: #E91E63;
$color-purple		: #9C27B0;

$color-lightblue	: #03A9F4;
$color-blue			: #2196F3;
$color-darkblue		: #1e70cd;

$color-indigo		: #3F51B5;
$color-cyan			: #00BCD4;
$color-teal			: #009688;

$color-green		: #4CAF50;
$color-lightgreen	: #8BC34A;
$color-lime			: #CDDC39;

$color-yellow		: #FFEB3B;
$color-amber		: #FFC107;
$color-orange		: #FF9800;

$color-brand: $color-spaceblack;



/* =======================================*/
/*
/* LAYOUT
/*
/* =======================================*/

$whitespace			: 20px;
$sidebar-width		: 205px;
$responsive			: true; 	// true or false
$global-border-box  : true;		// true or false
$devmode-overlay	: false; 	// true or false
$devmode-breakpoints: true; 	// true or false
$breakpoints: (
	'xs'	: 0px,
	's'  	: 410px,
	'm' 	: 650px,
	'l'  	: 800px,
	'xl'	: 960px,
	'xxl'	: 1180px
);



/* =======================================*/
/*
/* TYPOGRAPHY
/*
/* =======================================*/

$font-headline	: 'Raleway', sans-serif;
$font-text		: 'Roboto', sans-serif;
$font-size		: 14px;
$line-height	: 1.6;
$color-headline	: $color-black;
$color-text		: lighten($color-black, 20%);



/* =======================================*/
/*
/* USER INTERFACE
/*
/* =======================================*/

$border: 1px solid $color-grey;

$border-radius-size-1	: 2px;
$border-radius-size-2	: 4px;
$border-radius-size-3	: 6px;
$border-radius-size-4	: 8px;
$border-radius-size-5	: 10px;
$border-radius			: $border-radius-size-1;

$box-shadow-size-1	: 0px 1px 3px rgba(0, 0, 0, 0.2);
$box-shadow-size-2	: 0px 2px 5px rgba(0, 0, 0, 0.2);
$box-shadow-size-3	: 0px 4px 9px rgba(0, 0, 0, 0.2);
$box-shadow-size-4	: 0px 8px 18px rgba(0, 0, 0, 0.2);
$box-shadow-size-5	: 0px 16px 32px rgba(0, 0, 0, 0.2);
$box-shadow			: $box-shadow-size-2;
@mixin box-shadow($size: 1) {
	@if $size == 1 {
		box-shadow: $box-shadow-size-1;
	}
	@else if $size == 2 {
		box-shadow: $box-shadow-size-2;
	}
	@else if $size == 3 {
		box-shadow: $box-shadow-size-3;
	}
	@else if $size == 4 {
		box-shadow: $box-shadow-size-4;
	}
	@else if $size == 5 {
		box-shadow: $box-shadow-size-5;
	}
}

@mixin transition() {
	-webkit-transition: all 125ms ease-in;
	-moz-transition: all 125ms ease-in;
	-ms-transition: all 125ms ease-in; // IE10 is actually unprefixed //
	-o-transition: all 125ms ease-in;
	transition: all 125ms ease-in;
}



/* =======================================*/
/*
/* COMPONENTS
/*
/* =======================================*/

$teaser-lines-to-show: 3;



/* =======================================*/
/*
/* CONTAINER
/* 
/* =======================================*/

@mixin container() {
	@if $responsive == true {
		min-width: 0;
	} 
	@else {
		min-width: map-get($breakpoints, xl);
	}
	max-width: map-get($breakpoints, xxl);
	margin: 0 auto;
}



/* =======================================*/
/*
/* FLEXBOX
/* 
/* =======================================*/

@mixin flexbox($type: null, $direction: null, $wrap: null, $justify: null, $align: null) {
	// Flex or Inline-Flex
	@if $type == 'inline-flex' {
		display: inline-flex;
		margin-right: -4px; //fix for: invisible spacing for inline-block
	} @else {
		display: flex;
	} 
	// Flex Direction
	@if $direction == 'column' or $direction == 'col' {
		flex-direction: column;
	} @else {
		flex-direction: row;
	} 
	// Flex Wrap
	@if $wrap == 'nowrap' or $wrap == 'no-wrap' {
		flex-wrap: nowrap;
	} @else {
		flex-wrap: wrap;
	}
	// Justify Content
	@if $justify == null or $justify == 'space-between' or $justify == 'spacebetween' {
		justify-content: space-between;
	} @else if $justify == 'space-around' or $justify == 'spacearound' {
		justify-content: space-around;
	} @else if $justify == 'center' {
		justify-content: center;
	} @else if $justify == 'flex-start' or $justify == 'flexstart' or $justify == 'start'{
		justify-content: flex-start;
	} @else if $justify == 'flex-end' or $justify == 'flexend' or $justify == 'end' {
		justify-content: flex-end;
	}
	// Align items
	@if $align == null or $align == 'stretch' {
		align-items: stretch;
	} @else if $align == null or $align == 'baseline' {
		align-items: baseline;
	} @else if $align == 'center' {
		align-items: center;
	} @else if $align == 'flex-start' or $align == 'flexstart' or $align == 'start'{
		align-items: flex-start;
	} @else if $align == 'flex-end' or $align == 'flexend' or $align == 'end' {
		align-items: flex-end;
	}
}



/* =======================================*/
/*
/* MEDIAQUERIES
/* 
/* =======================================*/

/* =======================================*/
/* RESPOND AT - use: @include respond-at($name) {...} 
/* =======================================*/
@mixin respond-at($name) {
	@if $name == 'xs' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (max-width: map-get($breakpoints, 's')) {
			@content;
		}
	}
	@else if $name == 's' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 's')) and (max-width: map-get($breakpoints, 'm')) {
			@content;
		}
	}
	@else if $name == 'm' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 'm')) and (max-width: map-get($breakpoints, 'l')) {
			@content;
		}
	}
	@else if $name == 'l' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 'l')) and (max-width: map-get($breakpoints, 'xl')) {
			@content;
		}
	}
	@else if $name == 'xl' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 'xl')) and (max-width: map-get($breakpoints, 'xxl')) {
			@content;
		}
	}
	@else if $name == 'xxl' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 'xxl')) {
			@content;
		}
	}
	// at specific px width
	@else if $responsive == true {
		@media only screen and (min-width: $name) and (max-width: $name) {
			@content;
		}
	}
}

/* =======================================*/
/* RESPOND ABOVE - use: @include respond-above($name) {...} 
/* =======================================*/
@mixin respond-above($name) {
	@if $name == 'xs' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 'xs')) {
			@content;
		}
	}
	@else if $name == 's' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 's')) {
			@content;
		}
	}
	@else if $name == 'm' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 'm')) {
			@content;
		}
	}
	@else if $name == 'l' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 'l')) {
			@content;
		}
	}
	@else if $name == 'xl' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 'xl')) {
			@content;
		}
	}
	@else if $name == 'xxl' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (min-width: map-get($breakpoints, 'xxl')) {
			@content;
		}
	}
	// above specific px width
	@else if $responsive == true {
		@media only screen and (min-width: $name) {
			@content;
		}
	}
}

/* =======================================*/
/* RESPOND BELOW - use: @include respond-below($name) {...} 
/* =======================================*/
@mixin respond-below($name) {
	@if $name == 'xs' and map-has-key($breakpoints, $name) and $responsive == true {
		// Below xs not possible
	}
	@else if $name == 's' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (max-width: map-get($breakpoints, 's')) {
			@content;
		}
	}
	@else if $name == 'm' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (max-width: map-get($breakpoints, 'm')) {
			@content;
		}
	}
	@else if $name == 'l' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (max-width: map-get($breakpoints, 'l')) {
			@content;
		}
	}
	@else if $name == 'xl' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (max-width: map-get($breakpoints, 'xl')) {
			@content;
		}
	}
	@else if $name == 'xxl' and map-has-key($breakpoints, $name) and $responsive == true {
		@media only screen and (max-width: map-get($breakpoints, 'xxl')) {
			@content;
		}
	}
	// below specific px width
	@else if $responsive == true {
		@media only screen and (max-width: $name) {
			@content;
		}
	}
}

/* =======================================*/
/* RESPOND BETWEEN - use: @include respond-between($name1, $name2) {...} 
/* =======================================*/
@mixin respond-between($name1, $name2) {
	@if map-has-key($breakpoints, $name1) and map-has-key($breakpoints, $name2) and $responsive == true {
		@media only screen and (min-width: #{inspect(map-get($breakpoints, $name1))}) and (max-width: #{inspect(map-get($breakpoints, $name2))}) {
			@content;
		}
	}
	// between specific px widths
	@else if $responsive == true {
		@media only screen and (min-width: $name1) and (max-width: $name2) {
			@content;
		}
	}
}




/* =======================================*/
/*
/* GRID
/*
/* =======================================*/

@mixin column($fraction: '1/1', $gutter: null, $behavior: null) {
	// GRID: NO GUTTERS (default)
	@if ($gutter == 0px or $gutter == false or $gutter == null) {
		width: calc(99.999999% * #{$fraction});
		margin-bottom: 0;
		// BEHAVIOR: DOUBLING
		@if ($behavior == 'doubling') {
			@include respond-below(xl) 	{width: calc(99.999999% * #{$fraction} * 2);}
			@include respond-below(m) 	{width: calc(99.999999% * #{$fraction} / (#{$fraction} * 2));}
			@include respond-below(s) 	{width: 100%;}
		}
	}
	// GRID: WITH GUTTERS (accepts $whitespace variable, px or % as gutter)
	@else {
		@if ($gutter == true) {
			$gutter: $whitespace;
		}
		width: calc(99.999999% * #{$fraction} - (#{$gutter} - #{$gutter} * #{$fraction}));
		margin-bottom: $gutter;
		// BEHAVIOR: DOUBLING
		@if ($behavior == 'doubling') {
			@include respond-below(xl) 	{width: calc(99.999999% * (#{$fraction} * 2) - (#{$gutter} - #{$gutter} * (#{$fraction} * 2)));}
			@include respond-below(m) 	{width: calc(99.999999% * (#{$fraction} / (#{$fraction} * 2)) - (#{$gutter} - #{$gutter} * (#{$fraction} / (#{$fraction} * 2))));}
			@include respond-below(s) 	{width: 100%;}
		}
	}
	// BEHAVIOR: STACKING
	@if ($behavior == 'stacking') {
		@include respond-below(s) {
			width: 100%;
		}
	}
}




/* =======================================*/
/*
/* QUANTITY QUERIES
/* 
/* =======================================*/

/* =======================================*/
/* QUANTITY AT - use: @include quantity-at(4) {...}; 
/* =======================================*/
@mixin quantity-at($number: 4) {
	&:nth-last-child(n + #{$number}):nth-last-child(-n + #{$number}):first-child, 
	&:nth-last-child(n + #{$number}):nth-last-child(-n + #{$number}):first-child ~ & { 
		@content;
	}
}
/* =======================================*/
/* QUANTITY ABOVE - use: @include quantity-above(4) {...}; 
/* =======================================*/
@mixin quantity-above($number: 4) {
	&:nth-last-child(n + #{$number + 1}), 
	&:nth-last-child(n + #{$number + 1}) ~ & {
		@content;
	}
}
/* =======================================*/
/* QUANTITY BELOW - use: @include quantity-below(4) {...}; 
/* =======================================*/
@mixin quantity-below($number: 4) {
	&:nth-last-child(-n + #{$number - 1}):first-child, 
	&:nth-last-child(-n + #{$number - 1}):first-child ~ & {
		@content;
	}
}
/* =======================================*/
/* QUANTITY BETWEEN - use: @include quantity-between(2, 4) {...}; 
/* =======================================*/
@mixin quantity-between($number1: 2, $number2: 4) {
	&:nth-last-child(n + #{$number1}):nth-last-child(-n + #{$number2}):first-child, 
	&:nth-last-child(n + #{$number1}):nth-last-child(-n + #{$number2}):first-child ~ & { 
		@content;
	}
}



/* =======================================*/
/*
/* CSS ARROW
/* 
/* =======================================*/

@mixin arrow($direction: up, $align: center, $color: $color-brand, $size: $whitespace/2) {
	position: relative;
	
	&:before{
		content: " ";
		height: 0;
		width: 0;
		border: solid transparent;
		pointer-events: none;
		position: absolute;
		border-width: $size;
		
		// Up
		@if $direction == 'up' {
			bottom: 100%;
			border-bottom-color: $color;

			// Alignment
			@if $align == 'center' {
				top: inherit;
				left: 50%;
				right: inherit;
				margin: 0 0 0 (-$size);
			} @else if $align == 'left' {
				left: $whitespace;
			} @else if $align == 'right' {
				right: $whitespace;
			}
		}
		// Down
		@if $direction == 'down' {
			top: 100%;
			border-top-color: $color;

			// Alignment
			@if $align == 'center' {
				left: 50%;
				bottom: inherit;
				right: inherit;
				margin: 0 0 0 (-$size);
			} @else if $align == 'left' {
				left: $whitespace;
			} @else if $align == 'right' {
				right: $whitespace;
			}
		}
		// Left
		@if $direction == 'left' {
			right: 100%;
			border-right-color: $color;

			// Alignment
			@if $align == 'center' {
				top: 50%;
				left: inherit;
				bottom: inherit;
				margin: (-$size) 0 0 0;
			} @else if $align == 'top' {
				top: $whitespace;
			} @else if $align == 'bottom' {
				bottom: $whitespace;
			}
		}
		// Right
		@if $direction == 'right' {
			left: 100%;
			border-left-color: $color;

			// Alignment
			@if $align == 'center' {
				top: 50%;
				bottom: inherit;
				right: inherit;
				margin: (-$size) 0 0 0;
			} @else if $align == 'top' {
				top: $whitespace;
			} @else if $align == 'bottom' {
				bottom: $whitespace;
			}
		}
	}
}



/* =======================================*/
/*
/* POSITION SHORTHAND
/* 
/* =======================================*/

@mixin position($type: relative, $top: 0, $right: 0, $bottom: 0, $left: 0) {
	position: $type;
	@if $top != 0 {
		top: $top;
	}
	@if $right != 0 {
		right: $right;
	}
	@if $bottom != 0 {
		bottom: $bottom;
	}
	@if $left != 0 {
		left: $left;
	}
}



/* =======================================*/
/*
/* CLEARFIX
/* 
/* =======================================*/

@mixin clearfix() {
	*zoom: 1;
	&:before, &:after {
		content: '';
		display: table;
	}
	&:after {
		clear: both;
	}
}


/* =======================================*/
/*
/* GLOBAL BORDER BOX
/* 
/* =======================================*/

@if $global-border-box == true {
	html {
		-webkit-box-sizing:border-box;
		-moz-box-sizing:border-box;
		-ms-box-sizing:border-box;
		box-sizing:border-box;
	}

	*, *:before, *:after {
		box-sizing: inherit;
	}
} 


/* =======================================*/
/*
/* DEVMODE
/* 
/* =======================================*/
@if $devmode-overlay == true {
	* {background: rgba($color-spaceblack, 0.075) !important;}
} 
@if $devmode-breakpoints == true {
	html:before,
	html:after,
	body:before,
	body:after {
		color: #444;
		height: 28px;
		padding: 5px;
		font-size: 14px;
		text-align: right;
		display: block;
		background: rgba(255, 255, 255, 0.8);
		position: absolute;
		right: 0;
		z-index: 100000;
		pointer-events: none;
	}
	html:before {
		top: 30px;
		font-size: 16px;
		font-weight: bold;
		@include respond-at(xxl) {content: "Breakpoint: XXL";}
		@include respond-at(xl) {content: "Breakpoint: XL";}
		@include respond-at(l) {content: "Breakpoint: L";}
		@include respond-at(m) {content: "Breakpoint: M";}
		@include respond-at(s) {content: "Breakpoint: S";}
		@include respond-at(xs) {content: "Breakpoint: XS";}
	}
	html:after {
		top: 65px;
		@include respond-at(xxl) {content: "respond-at(xxl) ✓";}
		@include respond-at(xl) {content: "respond-at(xl) ✓";}
		@include respond-at(l) {content: "respond-at(l) ✓";}
		@include respond-at(m) {content: "respond-at(m) ✓";}
		@include respond-at(s) {content: "respond-at(s) ✓";}
		@include respond-at(xs) {content: "respond-at(xs) ✓";}
	}
	body:before {
		top: 95px;
		@include respond-above(xs) {content: "respond-above(xs) ✓";}
		@include respond-above(s) {content: "respond-above(s) ✓";}
		@include respond-above(m) {content: "respond-above(m) ✓";}
		@include respond-above(l) {content: "respond-above(l) ✓";}
		@include respond-above(xl) {content: "respond-above(xl) ✓";}
		@include respond-above(xxl) {content: "respond-above(xxl) ✓";}
	}
	body:after {
		top: 125px;
		@include respond-below(xxl) {content: "respond-below(xxl) ✓";}
		@include respond-below(xl) {content: "respond-below(xl) ✓";}
		@include respond-below(l) {content: "respond-below(l) ✓";}
		@include respond-below(m) {content: "respond-below(m) ✓";}
		@include respond-below(s) {content: "respond-below(s) ✓";}
		@include respond-below(xs) {content: "respond-below(xs) ✓";}
	}
}