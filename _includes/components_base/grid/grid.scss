/* =======================================*/
/*
/* GRID
/*
/* =======================================*/

/* =======================================*/
/* STRING SPLITTING -> Sass can't split strings natively.
/* =======================================*/
@function sl-explode($string, $delimiter: '', $separator: "space") {
	@if type-of($string) != "string" {
		@warn "`sl-explode` function expecting a string; #{type-of($string)} given.";
		@return null;
	}
	@if type-of($delimiter) != "string" {
		@warn "`sl-explode` function expecting a string; #{type-of($delimiter)} given.";
		@return null;
	}
	$result: ();
	$length: str-length($string);
	@if not index("space" "comma", $separator) {
		$separator: "space";
	}
	@if str-length($delimiter) == 0 {
		@for $i from 1 through $length {
			$result: append($result, str-slice($string, $i, $i));
		}
		@return $result;
	}
	$running: true;
	$remaining: $string;
	@while $running {
		$index: str-index($remaining, $delimiter);
		@if not $index {
			$running: false;
		}
		@else {
			$slice: str-slice($remaining, 1, $index - 1);
			$result: append($result, $slice, $separator);
			$remaining: str-slice($remaining, $index + str-length($delimiter));
		}
	}
	@return append($result, $remaining, $separator);
}


/* =======================================*/
/* COLUMNS
/* =======================================*/
@mixin column($fraction: '1/1', $gutter: null, $cycle: nth(sl-explode($fraction, '/'), 2)) {
	// No gutter (default)
	@if ($gutter == null or $gutter == 0px or $gutter == false or $gutter == none) {
		width: calc(99.999999% * #{$fraction});
		margin-bottom: 0;
	} 
	// Base gutter
	@else if ($gutter == true) {
		$gutter: $whitespace;
		width: calc(99.999999% * #{$fraction} - (#{$gutter} - #{$gutter} * #{$fraction}));
		margin-bottom: $whitespace;
	}
	// Specified gutter in px or %
	@else {
		width: calc(99.999999% * #{$fraction} - (#{$gutter} - #{$gutter} * #{$fraction}));
		margin-bottom: $gutter;
	}
}
